import groovyx.net.http.HTTPBuilder
import groovyx.net.http.ContentType
import groovyx.net.http.Method
import com.atlassian.jira.component.ComponentAccessor
import com.epam.SRProperties
 
class StashUser {
    String username
    String email
    String displayname
}
 
//functions
 
def addComment(String comment){    
    def author = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
 
    //10002 - Administrator project role
    ComponentAccessor.commentManager.create(issue, author, comment, null, 10002l, true)
}
 
Integer getUsedLicenses(String baseurl, String token){
 
    Integer result = -1
    def httpBuilder = new HTTPBuilder("$baseurl/rest/api/1.0/admin/license")
 
    try{
        httpBuilder.request(Method.GET, ContentType.JSON) {
            headers."Authorization" = "Basic $token"
 
 
            response.success = { response, json ->
                if (json) {
 
                        result = json.status.currentNumberOfUsers
                }
            }
            response.failure = { resp, data ->
                if (data) {
                    log.warn("Failed to make http request to $baseurl/rest/api/1.0/admin/license, statusLine: $resp.status, data: $data.text")
                } else {
                    log.warn("Failed to make http request to $baseurl/rest/api/1.0/admin/license, statusLine: $resp.status")
                }
            }
        }
    } catch(e){
        log.warn("Some error occured: $e.message")
    }
 
    return result
}
 
def resetUserCAPTCHA(String baseurl, String token, String username){
 
    def httpBuilder = new HTTPBuilder("$baseurl/rest/api/1.0/admin/users/captcha?name=$username")
 
    try{
        httpBuilder.request(Method.DELETE, ContentType.JSON) {
            headers."Authorization" = "Basic $token"
 
 
            response.success = { response, json ->
                log.warn("CAPTCHA cleared")
            }
            response.failure = { resp, data ->
                if (data) {
                    log.warn("Failed to make http request to $baseurl/rest/api/1.0/admin/users/captcha, statusLine: $resp.status, data: $data.text")
                } else {
                    log.warn("Failed to make http request to $baseurl/rest/api/1.0/admin/users/captcha, statusLine: $resp.status")
                }
            }
        }
    } catch(e){
        log.warn("Some error occured: $e.message")
    }
}
 
StashUser getUserByUsername (String baseurl, String token, String username){
    def httpBuilder = new HTTPBuilder("$baseurl/rest/api/1.0/admin/users?filter=$username")
    StashUser user = null
 
    try{
        httpBuilder.request(Method.GET, ContentType.JSON) {
            headers."Authorization" = "Basic $token"
       
 
            response.success = { response, json ->
                if (json) {
                   
                    if(json.size != 0)
                    {
                        json.values.each { u ->
                            log.warn(u)
 
                            if(u.name == username)
                            {
                                user = new StashUser()
 
                                user.username = u.name
                                user.email = u.emailAddress
                                user.displayname = u.displayName
                                user.isActive = u.active
                            }
                        }
                       
                    }
                }
            }
            response.failure = { resp, data ->
                if (data) {
                    log.warn("Failed to make http request to $baseurl/rest/api/1.0/admin/users?filter=$username, statusLine: $resp.status, data: $data.text")
                } else {
                    log.warn("Failed to make http request to $baseurl/rest/api/1.0/admin/users?filter=$username, statusLine: $resp.status")
                }
            }
        }
    } catch(e){
        log.warn("Some error occured: $e.message")
    }
 
    return user
}
 
Boolean isUserInGroup (String baseurl, String token, String username, String group){
    def httpBuilder = new HTTPBuilder("$baseurl/rest/api/1.0/admin/groups/more-members?context=$group&filter=$username")
    Boolean result = false
 
    try{
        httpBuilder.request(Method.GET, ContentType.JSON) {
            headers."Authorization" = "Basic $token"
 
            response.success = { response, json ->
                if (json) {
                   
                    log.warn(json)
                    if(json.size != 0)
                    {
                        json.values.each { u ->
 
                            if(u.name == username)
                            {
                                result = true
                            }
                        }
                       
                    }
                }
            }
            response.failure = { resp, data ->
                if (data) {
                    log.warn("Failed to make http request to $baseurl/rest/api/1.0/admin/groups/more-members?context=$group&filter=$username, statusLine: $resp.status, data: $data.text")
                } else {
                    log.warn("Failed to make http request to $baseurl/rest/api/1.0/admin/groups/more-members?context=$group&filter=$username, statusLine: $resp.status")
                }
            }
        }
    } catch(e){
        log.warn("Some error occured: $e.message")
    }
 
    return result
}
 
String addUserToGroup(String baseurl, String token, String username, String group)
{
    String output
    def remoteUserCreate = new HTTPBuilder("$baseurl/rest/api/1.0/admin/users/add-groups")
    try{
        remoteUserCreate.request(Method.POST, ContentType.JSON) {
        headers."Authorization" = "Basic ${token}"
 
        body = [ user :username,
                groups : [
                    group
                ]
            ]
 
        response.success = { response ->
            return "Success"
        }
        response.failure = { resp, data ->
            if (data) {
                output = "Failed to make http request to $baseurl/rest/api/1.0/admin/users/add-groups. $resp.status $data.text"
            } else {
                output = "Failed to make http request to $baseurl/rest/api/1.0/admin/users/add-groups. $resp.status"
            }
        }
      }
   } catch(e){
      output = "Some error occured: $e.message"
   }
}
 
String createUser(String baseurl, String token, String username, String displayName, String email)
{
    String output
    def remoteUserCreate = new HTTPBuilder("$baseurl/rest/api/1.0/admin/users")
    //for prod
    //def remoteUserCreate = new HTTPBuilder("$baseurl/rest/api/1.0/admin/users?name=$username&displayName=$displayName&emailAddress=$email&addToDefaultGroup=true&notify=true")
    try{
        remoteUserCreate.request(Method.POST, ContentType.ANY) {
        headers."Authorization" = "Basic ${token}"
        headers."X-Atlassian-Token" = "no-check"
 
        uri.query = [
            name : username,
            displayName : displayName,
            emailAddress : email,
            addToDefaultGroup : true,
            notify : true
        ]
 
        response.success = { response ->
            return "Success"
        }
        response.failure = { resp, data ->
            if (data) {
                log.warn(data)
                output = "Failed to make http request to $baseurl/rest/api/1.0/admin/users. $resp.status $data.text"
            } else {
                output = "Failed to make http request to $baseurl/rest/api/1.0/admin/users. $resp.status"
            }
        }
      }
   } catch(e){
      output = "Some other error occured: $e.message"
   }
}
 
 
 
//accessors
def issueManager = ComponentAccessor.issueManager
def customFieldManager = ComponentAccessor.getCustomFieldManager()
 
def props = SRProperties.instance.properties
 
final String stash_baseurl = "https://bitbucket.elcompanies.net"
final String licensigGroupName = "stash-users"
def stash_user = props['stash_username'].toString()
def stash_pass = props['stash_password'].toString()
 
def authToken = "$stash_user:$stash_pass".bytes.encodeBase64().toString()
 
//customfields
def userFullNameCf = customFieldManager.getCustomFieldObjectByName("User Full Name")
def userIDcf = customFieldManager.getCustomFieldObjectByName('User ID')
def userEmailcf = customFieldManager.getCustomFieldObjectByName('User Email Address')
def autoReplycf = customFieldManager.getCustomFieldObjectByName('Auto Response Bitbucket')
 
String userName = issue.getCustomFieldValue(userIDcf).trim().toLowerCase()
String password = ""
String emailAddress = issue.getCustomFieldValue(userEmailcf).trim().toLowerCase()
String displayName = issue.getCustomFieldValue(userFullNameCf).trim()
String autoReplyContent = ""
 
assert userName: "User name is empty"
assert emailAddress: "Email is empty"
assert displayName: "Display Name is empty"
 
String comment = "BITBUCKET:\n\r"
 
String correctUserName = emailAddress.substring(0, emailAddress.lastIndexOf("@"))
if(correctUserName != userName){
    comment += "Username should be equal to the first part of the email. User will have problems logging in via SSO (in future for bitbucket)\n\r"
    comment += "Correct the username and try again"
    addComment(comment);
    return
}
 
comment += "Current licensed users count: " + getUsedLicenses(stash_baseurl, authToken) + "\n\r"
 
StashUser stashUser = getUserByUsername(stash_baseurl, authToken, userName)
 
if(stashUser)
{
    //reset user CAPTCHA just in case
    resetUserCAPTCHA(stash_baseurl, authToken, userName)
   
    if (isUserInGroup(stash_baseurl, authToken, userName, licensigGroupName))
        {
            comment += "User *$userName* is active and has software license. Nothing to do.\n\r"
            autoReplyContent += "Your ELC Bitbucket account already exists and active. Let us know if there an access issue, please.\n\r"
        }
    else
        {
            String output =  addUserToGroup(stash_baseurl, authToken, userName, licensigGroupName)
           
            if(output == "Success")
                {
                    comment += "User *$userName* has been added to lisensing group\n\r"
                        autoReplyContent += "Your ELC Bitbucket account has been reactivated.\n\r"
                        autoReplyContent += "URL of the Bitbucket: https://bitbucket.elcompanies.net \n\r"
                        autoReplyContent += "Please note to not commit any new content to the Bitbucket, it's intended for reference purposes only, due to it's planned for retirement. All of the content actually should've been migrated to the GitHub by now. \n\r"
                        autoReplyContent += "The Bitbucket project's or repo administrators have to grant you permissions for those. If you don't know who to contact, let us know! To request access to the GitHub please raise a Jira ticket via this link in a [Jira project \"GitHub Access\"|https://jira.elcompanies.net/secure/CreateIssue!default.jspa?pid=17812]\n\r"      
                }
            else
                comment += output
        }
 
}
else
{
   String output =  createUser(stash_baseurl, authToken, userName, displayName, emailAddress)
    if(output == "Success")
        {
            comment += "User *$userName* has been created\n\r"
            autoReplyContent += "Your ELC Bitbucket account has been created.\n\r"
            autoReplyContent += "URL of the Bitbucket: https://bitbucket.elcompanies.net \n\r"
            autoReplyContent += "Please note to not commit any new content to the Bitbucket, it's intended for reference purposes only, due to it's planned for retirement. All of the content actually should've been migrated to the GitHub by now. \n\r"
            autoReplyContent += "The Bitbucket project's or repo administrators have to grant you permissions for those. If you don't know who to contact, let us know!  To request access to the GitHub please raise a Jira ticket via this link in the GA project: https://jira.elcompanies.net/secure/CreateIssue!default.jspa?pid=17812\n\r"
        }
    else
        comment += output
}
 
addComment(comment)
if (autoReplyContent!="")
{
    issue.update {
        setCustomFieldValue("Auto Response Bitbucket", autoReplyContent)
    }
}
