import groovyx.net.http.HTTPBuilder
import groovyx.net.http.ContentType
import groovyx.net.http.Method
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.config.properties.APKeys
import com.epam.SRProperties
import java.util.TimeZone
import com.epam.Helper
import static org.apache.commons.lang.StringEscapeUtils.escapeHtml
import org.apache.http.config.SocketConfig
import org.apache.http.client.config.RequestConfig
import org.apache.http.impl.client.HttpClients
 
final String baseurl = ComponentAccessor.getApplicationProperties().getString(APKeys.JIRA_BASEURL)
final String projectKey = "BALMAIN"
def props = SRProperties.instance.properties
final String token = props["jira_token"].toString()
final String confluenceBaseUrl = "https://confluence.elcompanies.net"
final String confluenceToken = props["confl_token"].toString()
final String confluenceTitle = "Test Management Summary"
//final int confluencePageId = 424129733
final int confluencePageId = 468256714
 
 
class TestCycle{
    String folder
    String key
    int testCaseCount = 0
    int inProgressCount = 0
    int doneCount = 0
    int failCount = 0
    int notExcecutedCount = 0
 
    StepsSummary steps
}
 
class Summary{
    int totalCaseCount = 0
    int totalInProgressCount = 0
    int totalDoneCount = 0
    int totalFailedCount = 0
    int totalNotExecuted = 0
 
    int totalStepsCount = 0
    int passStepsCount = 0
    int failStepsCount = 0
}
 
class StepsSummary{
    int totalSteps = 0
    int passStepsCount = 0
    int failStepsCount = 0
}
 
StepsSummary GetTestCycleStepsSummary (String baseurl, String token, String testCycleKey){
 
    StepsSummary result = new StepsSummary()
    def httpBuilder = new HTTPBuilder("$baseurl/rest/atm/1.0/testrun/$testCycleKey/testresults")
   
    try {
        def timeout = 600000 // millis
        SocketConfig sc = SocketConfig.custom().setSoTimeout(timeout).build()
        RequestConfig rc = RequestConfig.custom().setConnectTimeout(timeout).setSocketTimeout(timeout).build()
        def hc = HttpClients.custom().setDefaultSocketConfig(sc).setDefaultRequestConfig(rc).build()
        httpBuilder.client = hc
 
        httpBuilder.request(Method.GET, ContentType.JSON) {
            headers."Authorization" = "Bearer $token"
            response.success = { response, json ->
                if (json) {
                    json.each{tc ->
                        result.totalSteps += tc.scriptResults.size()
                        tc.scriptResults.each{ step ->
                            if(step.status == "Pass")
                                result.passStepsCount += 1
                            else if(step.status == "Fail")
                                result.failStepsCount += 1
                        }
                    }
                }
            }
        }
    }
    catch(e){
        log.warn("TestCycleKey: $testCycleKey Some error occured: $e.message")
    }
 
    return result
}
 
List<TestCycle> GetPartOfTestCycles(String baseurl, String token, String projectKey, int startAt, int maxResults){
    List<TestCycle> testCycles = []
 
    def httpBuilder = new HTTPBuilder("$baseurl/rest/atm/1.0/testrun/search")
 
    try
    {
        def timeout = 600000 // millis
        SocketConfig sc = SocketConfig.custom().setSoTimeout(timeout).build()
        RequestConfig rc = RequestConfig.custom().setConnectTimeout(timeout).setSocketTimeout(timeout).build()
        def hc = HttpClients.custom().setDefaultSocketConfig(sc).setDefaultRequestConfig(rc).build()
        httpBuilder.client = hc
 
        httpBuilder.request(Method.GET, ContentType.JSON) {
            headers."Authorization" = "Bearer $token"
           
            uri.query = [ query:'projectKey = "'+ projectKey + '" AND folder = "/UAT"', maxResults: maxResults, startAt:startAt, fields: "key, folder, testCaseCount, items"  ]
           
            response.success = { response, json ->
                    if (json) {
                        json.each{tc ->
                            TestCycle t = new TestCycle()
                            if(tc.folder)
                                t.folder = tc.folder
                            else {
                                t.folder = "Without folder (root)"
                                log.warn("TestCycle without folder $tc.key")
                            }
                            t.key = tc.key
                            t.testCaseCount = tc.testCaseCount
                            tc.items.each { i ->
 
                                switch(i.status){
                                    case "In Progress":
                                        t.inProgressCount += 1
                                        break
                                    case "Pass":
                                        t.doneCount +=1
                                        break
                                    case "Fail":
                                        t.failCount += 1
                                        break
                                    case "Not Executed":
                                        t.notExcecutedCount += 1
                                        break
                                }
                            }
 
                            t.steps = GetTestCycleStepsSummary(baseurl, token, t.key)
                           
                            testCycles.add(t)
                        }
                    }
                }
            response.failure = { resp, data ->
                    if (data) {
                        log.warn("statusLine: $resp.status data: $data")
                    } else {
                        log.warn("statusLine: $resp.status")
                    }
                }      
        }
    }
    catch(e){
        log.warn("Some error occured: $e.message")
    }
 
return testCycles
}
 
Map<String, Summary> summary  = new HashMap<>();
List<TestCycle> testCycles = []
 
int startAt = 0
int maxResults = 100
List<TestCycle> partOfTestCycles = GetPartOfTestCycles(baseurl, token, projectKey, startAt, maxResults)
log.warn("StartAt $startAt Size " + partOfTestCycles.size())
testCycles.addAll(partOfTestCycles)
 
while(partOfTestCycles != null && partOfTestCycles.size() != 0 && partOfTestCycles.size() == maxResults){
    startAt += maxResults
    partOfTestCycles = GetPartOfTestCycles(baseurl, token, projectKey, startAt, maxResults)
    log.warn("StartAt $startAt Size " + partOfTestCycles.size())
    testCycles.addAll(partOfTestCycles)
}
 
log.warn("Test Cycles size: " + testCycles.size())
 
testCycles.each { item ->
    if(!summary.containsKey(item.folder)){
            Summary s = new Summary()
            summary.put(item.folder, s)
        }
 
    Summary s = summary[item.folder]
    s.totalCaseCount += item.testCaseCount
    s.totalInProgressCount += item.inProgressCount
    s.totalDoneCount += item.doneCount
    s.totalFailedCount += item.failCount
    s.totalNotExecuted += item.notExcecutedCount
    s.totalStepsCount += item.steps.totalSteps
    s.passStepsCount += item.steps.passStepsCount
    s.failStepsCount += item.steps.failStepsCount
 }
 
summary = summary.sort()
 
StringBuilder builder = new StringBuilder()
 
builder.append("<table><th>Folder</th>")
builder.append("<th># of Test Cases</th><th># Of Test Cases in Progress</th><th># Failed Test Cases</th><th># Not Executed Test Cases</th>")
builder.append("<th># Of Cases Complete</th><th>% Complete</th>")
builder.append("<th>Total Steps</th><th>#of steps Passed</th><th>#of Steps Failed</th><th>% Complete</th>")
 
 summary.each { item ->
    Summary result = item.value
     def testCasePercent = ((result.totalDoneCount / result.totalCaseCount) * 100).round(0)
     def stepsPercent = ((result.passStepsCount / result.totalStepsCount) * 100).round(0)
 
    builder.append("<tr><td>${escapeHtml(item.key)}</td><td>$result.totalCaseCount</td><td>$result.totalInProgressCount</td>")
    builder.append("<td>$result.totalFailedCount</td><td>$result.totalNotExecuted</td>")
    builder.append("<td>$result.totalDoneCount</td><td>$testCasePercent%</td>")
    builder.append("<td>$result.totalStepsCount</td><td>$result.passStepsCount</td><td>$result.failStepsCount</td><td>$stepsPercent%</td></tr>")
  }
builder.append("</table>")
 
int version = Helper.GetPageCurrentVersion(confluenceBaseUrl, confluenceToken, confluencePageId)
if(version != 0)
    log.warn(Helper.SendTableToConfluence(confluenceBaseUrl, confluenceToken, confluencePageId, confluenceTitle, builder.toString(), version))
 
